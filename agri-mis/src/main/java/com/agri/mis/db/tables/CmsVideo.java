/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.CmsVideoRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function15;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CmsVideo extends TableImpl<CmsVideoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cms_video</code>
     */
    public static final CmsVideo CMS_VIDEO = new CmsVideo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CmsVideoRecord> getRecordType() {
        return CmsVideoRecord.class;
    }

    /**
     * The column <code>public.cms_video.id</code>.
     */
    public final TableField<CmsVideoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.cms_video.title</code>.
     */
    public final TableField<CmsVideoRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.cms_video.status</code>.
     */
    public final TableField<CmsVideoRecord, Short> STATUS = createField(DSL.name("status"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.cms_video.check_status</code>.
     */
    public final TableField<CmsVideoRecord, Short> CHECK_STATUS = createField(DSL.name("check_status"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.cms_video.author</code>.
     */
    public final TableField<CmsVideoRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.cms_video.prise_up</code>.
     */
    public final TableField<CmsVideoRecord, Integer> PRISE_UP = createField(DSL.name("prise_up"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.cms_video.prise_down</code>.
     */
    public final TableField<CmsVideoRecord, Integer> PRISE_DOWN = createField(DSL.name("prise_down"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.cms_video.category_id</code>.
     */
    public final TableField<CmsVideoRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.cms_video.created_at</code>.
     */
    public final TableField<CmsVideoRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.cms_video.created_by</code>.
     */
    public final TableField<CmsVideoRecord, Short> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.cms_video.tags</code>.
     */
    public final TableField<CmsVideoRecord, String> TAGS = createField(DSL.name("tags"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.cms_video.description</code>.
     */
    public final TableField<CmsVideoRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>public.cms_video.created_user_id</code>.
     */
    public final TableField<CmsVideoRecord, Long> CREATED_USER_ID = createField(DSL.name("created_user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.cms_video.publish_at</code>.
     */
    public final TableField<CmsVideoRecord, LocalDate> PUBLISH_AT = createField(DSL.name("publish_at"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.cms_video.image_url</code>.
     */
    public final TableField<CmsVideoRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.VARCHAR(255), this, "");

    private CmsVideo(Name alias, Table<CmsVideoRecord> aliased) {
        this(alias, aliased, null);
    }

    private CmsVideo(Name alias, Table<CmsVideoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.cms_video</code> table reference
     */
    public CmsVideo(String alias) {
        this(DSL.name(alias), CMS_VIDEO);
    }

    /**
     * Create an aliased <code>public.cms_video</code> table reference
     */
    public CmsVideo(Name alias) {
        this(alias, CMS_VIDEO);
    }

    /**
     * Create a <code>public.cms_video</code> table reference
     */
    public CmsVideo() {
        this(DSL.name("cms_video"), null);
    }

    public <O extends Record> CmsVideo(Table<O> child, ForeignKey<O, CmsVideoRecord> key) {
        super(child, key, CMS_VIDEO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CmsVideoRecord, Long> getIdentity() {
        return (Identity<CmsVideoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CmsVideoRecord> getPrimaryKey() {
        return Keys.CMS_VIDEO_PKEY;
    }

    @Override
    public CmsVideo as(String alias) {
        return new CmsVideo(DSL.name(alias), this);
    }

    @Override
    public CmsVideo as(Name alias) {
        return new CmsVideo(alias, this);
    }

    @Override
    public CmsVideo as(Table<?> alias) {
        return new CmsVideo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CmsVideo rename(String name) {
        return new CmsVideo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CmsVideo rename(Name name) {
        return new CmsVideo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CmsVideo rename(Table<?> name) {
        return new CmsVideo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, String, Short, Short, String, Integer, Integer, Long, LocalDateTime, Short, String, String, Long, LocalDate, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function15<? super Long, ? super String, ? super Short, ? super Short, ? super String, ? super Integer, ? super Integer, ? super Long, ? super LocalDateTime, ? super Short, ? super String, ? super String, ? super Long, ? super LocalDate, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function15<? super Long, ? super String, ? super Short, ? super Short, ? super String, ? super Integer, ? super Integer, ? super Long, ? super LocalDateTime, ? super Short, ? super String, ? super String, ? super Long, ? super LocalDate, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
