/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.MisPurchaseOrderItemRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MisPurchaseOrderItem extends TableImpl<MisPurchaseOrderItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mis_purchase_order_item</code>
     */
    public static final MisPurchaseOrderItem MIS_PURCHASE_ORDER_ITEM = new MisPurchaseOrderItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MisPurchaseOrderItemRecord> getRecordType() {
        return MisPurchaseOrderItemRecord.class;
    }

    /**
     * The column <code>public.mis_purchase_order_item.id</code>.
     */
    public final TableField<MisPurchaseOrderItemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.mis_purchase_order_item.product_id</code>.
     */
    public final TableField<MisPurchaseOrderItemRecord, Long> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_purchase_order_item.quantity</code>.
     */
    public final TableField<MisPurchaseOrderItemRecord, BigDecimal> QUANTITY = createField(DSL.name("quantity"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.mis_purchase_order_item.price</code>.
     */
    public final TableField<MisPurchaseOrderItemRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.mis_purchase_order_item.purchase_order_id</code>.
     */
    public final TableField<MisPurchaseOrderItemRecord, Long> PURCHASE_ORDER_ID = createField(DSL.name("purchase_order_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_purchase_order_item.created_at</code>.
     */
    public final TableField<MisPurchaseOrderItemRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.mis_purchase_order_item.created_by</code>.
     */
    public final TableField<MisPurchaseOrderItemRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_purchase_order_item.updted_at</code>.
     */
    public final TableField<MisPurchaseOrderItemRecord, LocalDateTime> UPDTED_AT = createField(DSL.name("updted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.mis_purchase_order_item.updated_by</code>.
     */
    public final TableField<MisPurchaseOrderItemRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_purchase_order_item.corp_id</code>.
     */
    public final TableField<MisPurchaseOrderItemRecord, Long> CORP_ID = createField(DSL.name("corp_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_purchase_order_item.amount</code>.
     */
    public final TableField<MisPurchaseOrderItemRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.mis_purchase_order_item.occur_at</code>.
     */
    public final TableField<MisPurchaseOrderItemRecord, LocalDateTime> OCCUR_AT = createField(DSL.name("occur_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private MisPurchaseOrderItem(Name alias, Table<MisPurchaseOrderItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private MisPurchaseOrderItem(Name alias, Table<MisPurchaseOrderItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mis_purchase_order_item</code> table
     * reference
     */
    public MisPurchaseOrderItem(String alias) {
        this(DSL.name(alias), MIS_PURCHASE_ORDER_ITEM);
    }

    /**
     * Create an aliased <code>public.mis_purchase_order_item</code> table
     * reference
     */
    public MisPurchaseOrderItem(Name alias) {
        this(alias, MIS_PURCHASE_ORDER_ITEM);
    }

    /**
     * Create a <code>public.mis_purchase_order_item</code> table reference
     */
    public MisPurchaseOrderItem() {
        this(DSL.name("mis_purchase_order_item"), null);
    }

    public <O extends Record> MisPurchaseOrderItem(Table<O> child, ForeignKey<O, MisPurchaseOrderItemRecord> key) {
        super(child, key, MIS_PURCHASE_ORDER_ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MisPurchaseOrderItemRecord, Long> getIdentity() {
        return (Identity<MisPurchaseOrderItemRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MisPurchaseOrderItemRecord> getPrimaryKey() {
        return Keys.PURCHASE_ORDER_ITEM_PKEY;
    }

    @Override
    public MisPurchaseOrderItem as(String alias) {
        return new MisPurchaseOrderItem(DSL.name(alias), this);
    }

    @Override
    public MisPurchaseOrderItem as(Name alias) {
        return new MisPurchaseOrderItem(alias, this);
    }

    @Override
    public MisPurchaseOrderItem as(Table<?> alias) {
        return new MisPurchaseOrderItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MisPurchaseOrderItem rename(String name) {
        return new MisPurchaseOrderItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisPurchaseOrderItem rename(Name name) {
        return new MisPurchaseOrderItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisPurchaseOrderItem rename(Table<?> name) {
        return new MisPurchaseOrderItem(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Long, BigDecimal, BigDecimal, Long, LocalDateTime, String, LocalDateTime, String, Long, BigDecimal, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super Long, ? super BigDecimal, ? super BigDecimal, ? super Long, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super Long, ? super BigDecimal, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super Long, ? super BigDecimal, ? super BigDecimal, ? super Long, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super Long, ? super BigDecimal, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
