/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.ProductionOrderRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function17;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductionOrder extends TableImpl<ProductionOrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.production_order</code>
     */
    public static final ProductionOrder PRODUCTION_ORDER = new ProductionOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductionOrderRecord> getRecordType() {
        return ProductionOrderRecord.class;
    }

    /**
     * The column <code>public.production_order.id</code>.
     */
    public final TableField<ProductionOrderRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.production_order.code</code>.
     */
    public final TableField<ProductionOrderRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.production_order.quantity</code>.
     */
    public final TableField<ProductionOrderRecord, Double> QUANTITY = createField(DSL.name("quantity"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.production_order.amount</code>.
     */
    public final TableField<ProductionOrderRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.production_order.batch_id</code>.
     */
    public final TableField<ProductionOrderRecord, Long> BATCH_ID = createField(DSL.name("batch_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.production_order.created_at</code>.
     */
    public final TableField<ProductionOrderRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.production_order.updated_at</code>.
     */
    public final TableField<ProductionOrderRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.production_order.corp_id</code>.
     */
    public final TableField<ProductionOrderRecord, Long> CORP_ID = createField(DSL.name("corp_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.production_order.status</code>.
     */
    public final TableField<ProductionOrderRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.production_order.start_at</code>.
     */
    public final TableField<ProductionOrderRecord, LocalDate> START_AT = createField(DSL.name("start_at"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.production_order.end_at</code>.
     */
    public final TableField<ProductionOrderRecord, LocalDate> END_AT = createField(DSL.name("end_at"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.production_order.description</code>.
     */
    public final TableField<ProductionOrderRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.production_order.name</code>.
     */
    public final TableField<ProductionOrderRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.production_order.park_base_id</code>.
     */
    public final TableField<ProductionOrderRecord, Long> PARK_BASE_ID = createField(DSL.name("park_base_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.production_order.check_status</code>.
     */
    public final TableField<ProductionOrderRecord, Integer> CHECK_STATUS = createField(DSL.name("check_status"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.production_order.created_user_id</code>.
     */
    public final TableField<ProductionOrderRecord, Long> CREATED_USER_ID = createField(DSL.name("created_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.production_order.updated_user_id</code>.
     */
    public final TableField<ProductionOrderRecord, Long> UPDATED_USER_ID = createField(DSL.name("updated_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private ProductionOrder(Name alias, Table<ProductionOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductionOrder(Name alias, Table<ProductionOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.production_order</code> table reference
     */
    public ProductionOrder(String alias) {
        this(DSL.name(alias), PRODUCTION_ORDER);
    }

    /**
     * Create an aliased <code>public.production_order</code> table reference
     */
    public ProductionOrder(Name alias) {
        this(alias, PRODUCTION_ORDER);
    }

    /**
     * Create a <code>public.production_order</code> table reference
     */
    public ProductionOrder() {
        this(DSL.name("production_order"), null);
    }

    public <O extends Record> ProductionOrder(Table<O> child, ForeignKey<O, ProductionOrderRecord> key) {
        super(child, key, PRODUCTION_ORDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProductionOrderRecord, Long> getIdentity() {
        return (Identity<ProductionOrderRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductionOrderRecord> getPrimaryKey() {
        return Keys.PRODUCTION_ORDER_PKEY;
    }

    @Override
    public ProductionOrder as(String alias) {
        return new ProductionOrder(DSL.name(alias), this);
    }

    @Override
    public ProductionOrder as(Name alias) {
        return new ProductionOrder(alias, this);
    }

    @Override
    public ProductionOrder as(Table<?> alias) {
        return new ProductionOrder(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductionOrder rename(String name) {
        return new ProductionOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductionOrder rename(Name name) {
        return new ProductionOrder(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductionOrder rename(Table<?> name) {
        return new ProductionOrder(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, String, Double, BigDecimal, Long, LocalDateTime, LocalDateTime, Long, Integer, LocalDate, LocalDate, String, String, Long, Integer, Long, Long> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super Long, ? super String, ? super Double, ? super BigDecimal, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super Integer, ? super LocalDate, ? super LocalDate, ? super String, ? super String, ? super Long, ? super Integer, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super Long, ? super String, ? super Double, ? super BigDecimal, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super Integer, ? super LocalDate, ? super LocalDate, ? super String, ? super String, ? super Long, ? super Integer, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
