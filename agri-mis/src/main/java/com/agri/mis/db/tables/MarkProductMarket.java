/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.MarkProductMarketRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MarkProductMarket extends TableImpl<MarkProductMarketRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mark_product_market</code>
     */
    public static final MarkProductMarket MARK_PRODUCT_MARKET = new MarkProductMarket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MarkProductMarketRecord> getRecordType() {
        return MarkProductMarketRecord.class;
    }

    /**
     * The column <code>public.mark_product_market.product_id</code>.
     */
    public final TableField<MarkProductMarketRecord, Long> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mark_product_market.price_wholesale</code>.
     */
    public final TableField<MarkProductMarketRecord, BigDecimal> PRICE_WHOLESALE = createField(DSL.name("price_wholesale"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.mark_product_market.calc_unit</code>.
     */
    public final TableField<MarkProductMarketRecord, String> CALC_UNIT = createField(DSL.name("calc_unit"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.mark_product_market.id</code>.
     */
    public final TableField<MarkProductMarketRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.mark_product_market.occur_at</code>.
     */
    public final TableField<MarkProductMarketRecord, LocalDate> OCCUR_AT = createField(DSL.name("occur_at"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.mark_product_market.price_retal</code>.
     */
    public final TableField<MarkProductMarketRecord, BigDecimal> PRICE_RETAL = createField(DSL.name("price_retal"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.mark_product_market.market_id</code>.
     */
    public final TableField<MarkProductMarketRecord, Long> MARKET_ID = createField(DSL.name("market_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mark_product_market.quantity</code>.
     */
    public final TableField<MarkProductMarketRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER, this, "");

    private MarkProductMarket(Name alias, Table<MarkProductMarketRecord> aliased) {
        this(alias, aliased, null);
    }

    private MarkProductMarket(Name alias, Table<MarkProductMarketRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mark_product_market</code> table reference
     */
    public MarkProductMarket(String alias) {
        this(DSL.name(alias), MARK_PRODUCT_MARKET);
    }

    /**
     * Create an aliased <code>public.mark_product_market</code> table reference
     */
    public MarkProductMarket(Name alias) {
        this(alias, MARK_PRODUCT_MARKET);
    }

    /**
     * Create a <code>public.mark_product_market</code> table reference
     */
    public MarkProductMarket() {
        this(DSL.name("mark_product_market"), null);
    }

    public <O extends Record> MarkProductMarket(Table<O> child, ForeignKey<O, MarkProductMarketRecord> key) {
        super(child, key, MARK_PRODUCT_MARKET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MarkProductMarketRecord, Long> getIdentity() {
        return (Identity<MarkProductMarketRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MarkProductMarketRecord> getPrimaryKey() {
        return Keys.PRODUCT_MARKET_PKEY;
    }

    @Override
    public MarkProductMarket as(String alias) {
        return new MarkProductMarket(DSL.name(alias), this);
    }

    @Override
    public MarkProductMarket as(Name alias) {
        return new MarkProductMarket(alias, this);
    }

    @Override
    public MarkProductMarket as(Table<?> alias) {
        return new MarkProductMarket(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkProductMarket rename(String name) {
        return new MarkProductMarket(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkProductMarket rename(Name name) {
        return new MarkProductMarket(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkProductMarket rename(Table<?> name) {
        return new MarkProductMarket(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, BigDecimal, String, Long, LocalDate, BigDecimal, Long, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super BigDecimal, ? super String, ? super Long, ? super LocalDate, ? super BigDecimal, ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super BigDecimal, ? super String, ? super Long, ? super LocalDate, ? super BigDecimal, ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
