/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.MisPurchaseOrderRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function15;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MisPurchaseOrder extends TableImpl<MisPurchaseOrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mis_purchase_order</code>
     */
    public static final MisPurchaseOrder MIS_PURCHASE_ORDER = new MisPurchaseOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MisPurchaseOrderRecord> getRecordType() {
        return MisPurchaseOrderRecord.class;
    }

    /**
     * The column <code>public.mis_purchase_order.id</code>.
     */
    public final TableField<MisPurchaseOrderRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.mis_purchase_order.name</code>.
     */
    public final TableField<MisPurchaseOrderRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_purchase_order.order_no</code>.
     */
    public final TableField<MisPurchaseOrderRecord, String> ORDER_NO = createField(DSL.name("order_no"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_purchase_order.customer_id</code>.
     */
    public final TableField<MisPurchaseOrderRecord, Long> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_purchase_order.quantity</code>.
     */
    public final TableField<MisPurchaseOrderRecord, BigDecimal> QUANTITY = createField(DSL.name("quantity"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.mis_purchase_order.amount</code>.
     */
    public final TableField<MisPurchaseOrderRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.mis_purchase_order.batch_id</code>.
     */
    public final TableField<MisPurchaseOrderRecord, Long> BATCH_ID = createField(DSL.name("batch_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_purchase_order.created_at</code>.
     */
    public final TableField<MisPurchaseOrderRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.mis_purchase_order.created_by</code>.
     */
    public final TableField<MisPurchaseOrderRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_purchase_order.updted_at</code>.
     */
    public final TableField<MisPurchaseOrderRecord, LocalDateTime> UPDTED_AT = createField(DSL.name("updted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.mis_purchase_order.updated_by</code>.
     */
    public final TableField<MisPurchaseOrderRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_purchase_order.corp_id</code>.
     */
    public final TableField<MisPurchaseOrderRecord, Long> CORP_ID = createField(DSL.name("corp_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_purchase_order.status</code>.
     */
    public final TableField<MisPurchaseOrderRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mis_purchase_order.occur_at</code>.
     */
    public final TableField<MisPurchaseOrderRecord, LocalDateTime> OCCUR_AT = createField(DSL.name("occur_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.mis_purchase_order.created_user_id</code>.
     */
    public final TableField<MisPurchaseOrderRecord, Long> CREATED_USER_ID = createField(DSL.name("created_user_id"), SQLDataType.BIGINT, this, "");

    private MisPurchaseOrder(Name alias, Table<MisPurchaseOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private MisPurchaseOrder(Name alias, Table<MisPurchaseOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mis_purchase_order</code> table reference
     */
    public MisPurchaseOrder(String alias) {
        this(DSL.name(alias), MIS_PURCHASE_ORDER);
    }

    /**
     * Create an aliased <code>public.mis_purchase_order</code> table reference
     */
    public MisPurchaseOrder(Name alias) {
        this(alias, MIS_PURCHASE_ORDER);
    }

    /**
     * Create a <code>public.mis_purchase_order</code> table reference
     */
    public MisPurchaseOrder() {
        this(DSL.name("mis_purchase_order"), null);
    }

    public <O extends Record> MisPurchaseOrder(Table<O> child, ForeignKey<O, MisPurchaseOrderRecord> key) {
        super(child, key, MIS_PURCHASE_ORDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MisPurchaseOrderRecord, Long> getIdentity() {
        return (Identity<MisPurchaseOrderRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MisPurchaseOrderRecord> getPrimaryKey() {
        return Keys.PURCHASE_ORDER_PKEY;
    }

    @Override
    public MisPurchaseOrder as(String alias) {
        return new MisPurchaseOrder(DSL.name(alias), this);
    }

    @Override
    public MisPurchaseOrder as(Name alias) {
        return new MisPurchaseOrder(alias, this);
    }

    @Override
    public MisPurchaseOrder as(Table<?> alias) {
        return new MisPurchaseOrder(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MisPurchaseOrder rename(String name) {
        return new MisPurchaseOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisPurchaseOrder rename(Name name) {
        return new MisPurchaseOrder(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisPurchaseOrder rename(Table<?> name) {
        return new MisPurchaseOrder(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, String, String, Long, BigDecimal, BigDecimal, Long, LocalDateTime, String, LocalDateTime, String, Long, Integer, LocalDateTime, Long> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function15<? super Long, ? super String, ? super String, ? super Long, ? super BigDecimal, ? super BigDecimal, ? super Long, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super Long, ? super Integer, ? super LocalDateTime, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function15<? super Long, ? super String, ? super String, ? super Long, ? super BigDecimal, ? super BigDecimal, ? super Long, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super Long, ? super Integer, ? super LocalDateTime, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
