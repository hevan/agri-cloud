/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.MisStockPlaceItemSubRecord;

import java.math.BigDecimal;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MisStockPlaceItemSub extends TableImpl<MisStockPlaceItemSubRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mis_stock_place_item_sub</code>
     */
    public static final MisStockPlaceItemSub MIS_STOCK_PLACE_ITEM_SUB = new MisStockPlaceItemSub();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MisStockPlaceItemSubRecord> getRecordType() {
        return MisStockPlaceItemSubRecord.class;
    }

    /**
     * The column <code>public.mis_stock_place_item_sub.id</code>.
     */
    public final TableField<MisStockPlaceItemSubRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>public.mis_stock_place_item_sub.stock_place_item_id</code>.
     */
    public final TableField<MisStockPlaceItemSubRecord, Long> STOCK_PLACE_ITEM_ID = createField(DSL.name("stock_place_item_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_stock_place_item_sub.quantity</code>.
     */
    public final TableField<MisStockPlaceItemSubRecord, BigDecimal> QUANTITY = createField(DSL.name("quantity"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.mis_stock_place_item_sub.orgin_code</code>.
     */
    public final TableField<MisStockPlaceItemSubRecord, String> ORGIN_CODE = createField(DSL.name("orgin_code"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_stock_place_item_sub.product_code</code>.
     */
    public final TableField<MisStockPlaceItemSubRecord, String> PRODUCT_CODE = createField(DSL.name("product_code"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private MisStockPlaceItemSub(Name alias, Table<MisStockPlaceItemSubRecord> aliased) {
        this(alias, aliased, null);
    }

    private MisStockPlaceItemSub(Name alias, Table<MisStockPlaceItemSubRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mis_stock_place_item_sub</code> table
     * reference
     */
    public MisStockPlaceItemSub(String alias) {
        this(DSL.name(alias), MIS_STOCK_PLACE_ITEM_SUB);
    }

    /**
     * Create an aliased <code>public.mis_stock_place_item_sub</code> table
     * reference
     */
    public MisStockPlaceItemSub(Name alias) {
        this(alias, MIS_STOCK_PLACE_ITEM_SUB);
    }

    /**
     * Create a <code>public.mis_stock_place_item_sub</code> table reference
     */
    public MisStockPlaceItemSub() {
        this(DSL.name("mis_stock_place_item_sub"), null);
    }

    public <O extends Record> MisStockPlaceItemSub(Table<O> child, ForeignKey<O, MisStockPlaceItemSubRecord> key) {
        super(child, key, MIS_STOCK_PLACE_ITEM_SUB);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MisStockPlaceItemSubRecord, Long> getIdentity() {
        return (Identity<MisStockPlaceItemSubRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MisStockPlaceItemSubRecord> getPrimaryKey() {
        return Keys.MIS_STOCK_PLACE_ITEM_SUB_PKEY;
    }

    @Override
    public MisStockPlaceItemSub as(String alias) {
        return new MisStockPlaceItemSub(DSL.name(alias), this);
    }

    @Override
    public MisStockPlaceItemSub as(Name alias) {
        return new MisStockPlaceItemSub(alias, this);
    }

    @Override
    public MisStockPlaceItemSub as(Table<?> alias) {
        return new MisStockPlaceItemSub(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MisStockPlaceItemSub rename(String name) {
        return new MisStockPlaceItemSub(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisStockPlaceItemSub rename(Name name) {
        return new MisStockPlaceItemSub(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisStockPlaceItemSub rename(Table<?> name) {
        return new MisStockPlaceItemSub(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, BigDecimal, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super BigDecimal, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Long, ? super BigDecimal, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
