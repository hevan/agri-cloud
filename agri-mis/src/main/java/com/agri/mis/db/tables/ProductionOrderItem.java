/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.ProductionOrderItemRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductionOrderItem extends TableImpl<ProductionOrderItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.production_order_item</code>
     */
    public static final ProductionOrderItem PRODUCTION_ORDER_ITEM = new ProductionOrderItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductionOrderItemRecord> getRecordType() {
        return ProductionOrderItemRecord.class;
    }

    /**
     * The column <code>public.production_order_item.id</code>.
     */
    public final TableField<ProductionOrderItemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.production_order_item.product_id</code>.
     */
    public final TableField<ProductionOrderItemRecord, Long> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.production_order_item.quantity</code>.
     */
    public final TableField<ProductionOrderItemRecord, Double> QUANTITY = createField(DSL.name("quantity"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.production_order_item.price</code>.
     */
    public final TableField<ProductionOrderItemRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.production_order_item.order_id</code>.
     */
    public final TableField<ProductionOrderItemRecord, Long> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.production_order_item.created_at</code>.
     */
    public final TableField<ProductionOrderItemRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.production_order_item.corp_id</code>.
     */
    public final TableField<ProductionOrderItemRecord, Long> CORP_ID = createField(DSL.name("corp_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.production_order_item.amount</code>.
     */
    public final TableField<ProductionOrderItemRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.production_order_item.product_sku</code>.
     */
    public final TableField<ProductionOrderItemRecord, String> PRODUCT_SKU = createField(DSL.name("product_sku"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.production_order_item.description</code>.
     */
    public final TableField<ProductionOrderItemRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private ProductionOrderItem(Name alias, Table<ProductionOrderItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductionOrderItem(Name alias, Table<ProductionOrderItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.production_order_item</code> table
     * reference
     */
    public ProductionOrderItem(String alias) {
        this(DSL.name(alias), PRODUCTION_ORDER_ITEM);
    }

    /**
     * Create an aliased <code>public.production_order_item</code> table
     * reference
     */
    public ProductionOrderItem(Name alias) {
        this(alias, PRODUCTION_ORDER_ITEM);
    }

    /**
     * Create a <code>public.production_order_item</code> table reference
     */
    public ProductionOrderItem() {
        this(DSL.name("production_order_item"), null);
    }

    public <O extends Record> ProductionOrderItem(Table<O> child, ForeignKey<O, ProductionOrderItemRecord> key) {
        super(child, key, PRODUCTION_ORDER_ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProductionOrderItemRecord, Long> getIdentity() {
        return (Identity<ProductionOrderItemRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductionOrderItemRecord> getPrimaryKey() {
        return Keys.PRODUCTION_ORDER_ITEM_PKEY;
    }

    @Override
    public ProductionOrderItem as(String alias) {
        return new ProductionOrderItem(DSL.name(alias), this);
    }

    @Override
    public ProductionOrderItem as(Name alias) {
        return new ProductionOrderItem(alias, this);
    }

    @Override
    public ProductionOrderItem as(Table<?> alias) {
        return new ProductionOrderItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductionOrderItem rename(String name) {
        return new ProductionOrderItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductionOrderItem rename(Name name) {
        return new ProductionOrderItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductionOrderItem rename(Table<?> name) {
        return new ProductionOrderItem(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Double, BigDecimal, Long, LocalDateTime, Long, BigDecimal, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super Long, ? super Double, ? super BigDecimal, ? super Long, ? super LocalDateTime, ? super Long, ? super BigDecimal, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super Long, ? super Double, ? super BigDecimal, ? super Long, ? super LocalDateTime, ? super Long, ? super BigDecimal, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
