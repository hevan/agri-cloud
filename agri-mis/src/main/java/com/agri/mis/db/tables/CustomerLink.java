/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.CustomerLinkRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CustomerLink extends TableImpl<CustomerLinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.customer_link</code>
     */
    public static final CustomerLink CUSTOMER_LINK = new CustomerLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerLinkRecord> getRecordType() {
        return CustomerLinkRecord.class;
    }

    /**
     * The column <code>public.customer_link.id</code>.
     */
    public final TableField<CustomerLinkRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.customer_link.customer_id</code>.
     */
    public final TableField<CustomerLinkRecord, Long> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.customer_link.link_name</code>.
     */
    public final TableField<CustomerLinkRecord, String> LINK_NAME = createField(DSL.name("link_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.customer_link.link_mobile</code>.
     */
    public final TableField<CustomerLinkRecord, String> LINK_MOBILE = createField(DSL.name("link_mobile"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.customer_link.created_at</code>.
     */
    public final TableField<CustomerLinkRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.customer_link.position</code>.
     */
    public final TableField<CustomerLinkRecord, String> POSITION = createField(DSL.name("position"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.customer_link.description</code>.
     */
    public final TableField<CustomerLinkRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private CustomerLink(Name alias, Table<CustomerLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private CustomerLink(Name alias, Table<CustomerLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.customer_link</code> table reference
     */
    public CustomerLink(String alias) {
        this(DSL.name(alias), CUSTOMER_LINK);
    }

    /**
     * Create an aliased <code>public.customer_link</code> table reference
     */
    public CustomerLink(Name alias) {
        this(alias, CUSTOMER_LINK);
    }

    /**
     * Create a <code>public.customer_link</code> table reference
     */
    public CustomerLink() {
        this(DSL.name("customer_link"), null);
    }

    public <O extends Record> CustomerLink(Table<O> child, ForeignKey<O, CustomerLinkRecord> key) {
        super(child, key, CUSTOMER_LINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CustomerLinkRecord, Long> getIdentity() {
        return (Identity<CustomerLinkRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CustomerLinkRecord> getPrimaryKey() {
        return Keys.CUSTOMER_LINK_PKEY;
    }

    @Override
    public CustomerLink as(String alias) {
        return new CustomerLink(DSL.name(alias), this);
    }

    @Override
    public CustomerLink as(Name alias) {
        return new CustomerLink(alias, this);
    }

    @Override
    public CustomerLink as(Table<?> alias) {
        return new CustomerLink(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerLink rename(String name) {
        return new CustomerLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerLink rename(Name name) {
        return new CustomerLink(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerLink rename(Table<?> name) {
        return new CustomerLink(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, String, String, LocalDateTime, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super Long, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super Long, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
