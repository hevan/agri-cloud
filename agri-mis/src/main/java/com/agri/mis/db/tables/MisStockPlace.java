/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.MisStockPlaceRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MisStockPlace extends TableImpl<MisStockPlaceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mis_stock_place</code>
     */
    public static final MisStockPlace MIS_STOCK_PLACE = new MisStockPlace();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MisStockPlaceRecord> getRecordType() {
        return MisStockPlaceRecord.class;
    }

    /**
     * The column <code>public.mis_stock_place.id</code>.
     */
    public final TableField<MisStockPlaceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.mis_stock_place.product_id</code>.
     */
    public final TableField<MisStockPlaceRecord, Long> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_stock_place.quantity</code>.
     */
    public final TableField<MisStockPlaceRecord, BigDecimal> QUANTITY = createField(DSL.name("quantity"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.mis_stock_place.sku</code>.
     */
    public final TableField<MisStockPlaceRecord, String> SKU = createField(DSL.name("sku"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_stock_place.store_item_code</code>.
     */
    public final TableField<MisStockPlaceRecord, String> STORE_ITEM_CODE = createField(DSL.name("store_item_code"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_stock_place.store_pallet_code</code>.
     */
    public final TableField<MisStockPlaceRecord, String> STORE_PALLET_CODE = createField(DSL.name("store_pallet_code"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_stock_place.direction</code>.
     */
    public final TableField<MisStockPlaceRecord, Integer> DIRECTION = createField(DSL.name("direction"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mis_stock_place.store_id</code>.
     */
    public final TableField<MisStockPlaceRecord, Long> STORE_ID = createField(DSL.name("store_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_stock_place.stock_id</code>.
     */
    public final TableField<MisStockPlaceRecord, Long> STOCK_ID = createField(DSL.name("stock_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_stock_place.occur_at</code>.
     */
    public final TableField<MisStockPlaceRecord, LocalDate> OCCUR_AT = createField(DSL.name("occur_at"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.mis_stock_place.created_at</code>.
     */
    public final TableField<MisStockPlaceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.mis_stock_place.created_by</code>.
     */
    public final TableField<MisStockPlaceRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_stock_place.updted_at</code>.
     */
    public final TableField<MisStockPlaceRecord, LocalDateTime> UPDTED_AT = createField(DSL.name("updted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.mis_stock_place.updated_by</code>.
     */
    public final TableField<MisStockPlaceRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_stock_place.corp_id</code>.
     */
    public final TableField<MisStockPlaceRecord, Long> CORP_ID = createField(DSL.name("corp_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_stock_place.status</code>.
     */
    public final TableField<MisStockPlaceRecord, Short> STATUS = createField(DSL.name("status"), SQLDataType.SMALLINT, this, "");

    private MisStockPlace(Name alias, Table<MisStockPlaceRecord> aliased) {
        this(alias, aliased, null);
    }

    private MisStockPlace(Name alias, Table<MisStockPlaceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mis_stock_place</code> table reference
     */
    public MisStockPlace(String alias) {
        this(DSL.name(alias), MIS_STOCK_PLACE);
    }

    /**
     * Create an aliased <code>public.mis_stock_place</code> table reference
     */
    public MisStockPlace(Name alias) {
        this(alias, MIS_STOCK_PLACE);
    }

    /**
     * Create a <code>public.mis_stock_place</code> table reference
     */
    public MisStockPlace() {
        this(DSL.name("mis_stock_place"), null);
    }

    public <O extends Record> MisStockPlace(Table<O> child, ForeignKey<O, MisStockPlaceRecord> key) {
        super(child, key, MIS_STOCK_PLACE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MisStockPlaceRecord, Long> getIdentity() {
        return (Identity<MisStockPlaceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MisStockPlaceRecord> getPrimaryKey() {
        return Keys.MIS_STOCK_PLACE_PKEY;
    }

    @Override
    public MisStockPlace as(String alias) {
        return new MisStockPlace(DSL.name(alias), this);
    }

    @Override
    public MisStockPlace as(Name alias) {
        return new MisStockPlace(alias, this);
    }

    @Override
    public MisStockPlace as(Table<?> alias) {
        return new MisStockPlace(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MisStockPlace rename(String name) {
        return new MisStockPlace(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisStockPlace rename(Name name) {
        return new MisStockPlace(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisStockPlace rename(Table<?> name) {
        return new MisStockPlace(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, Long, BigDecimal, String, String, String, Integer, Long, Long, LocalDate, LocalDateTime, String, LocalDateTime, String, Long, Short> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super Long, ? super Long, ? super BigDecimal, ? super String, ? super String, ? super String, ? super Integer, ? super Long, ? super Long, ? super LocalDate, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super Long, ? super Short, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super Long, ? super Long, ? super BigDecimal, ? super String, ? super String, ? super String, ? super Integer, ? super Long, ? super Long, ? super LocalDate, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super Long, ? super Short, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
