/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.MisStockRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function17;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MisStock extends TableImpl<MisStockRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mis_stock</code>
     */
    public static final MisStock MIS_STOCK = new MisStock();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MisStockRecord> getRecordType() {
        return MisStockRecord.class;
    }

    /**
     * The column <code>public.mis_stock.id</code>.
     */
    public final TableField<MisStockRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.mis_stock.name</code>.
     */
    public final TableField<MisStockRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_stock.order_no</code>.
     */
    public final TableField<MisStockRecord, String> ORDER_NO = createField(DSL.name("order_no"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_stock.quantity</code>.
     */
    public final TableField<MisStockRecord, BigDecimal> QUANTITY = createField(DSL.name("quantity"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.mis_stock.price</code>.
     */
    public final TableField<MisStockRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.mis_stock.amount</code>.
     */
    public final TableField<MisStockRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.mis_stock.origin_id</code>.
     */
    public final TableField<MisStockRecord, Long> ORIGIN_ID = createField(DSL.name("origin_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_stock.origin_type</code>.
     */
    public final TableField<MisStockRecord, String> ORIGIN_TYPE = createField(DSL.name("origin_type"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.mis_stock.store_id</code>.
     */
    public final TableField<MisStockRecord, Long> STORE_ID = createField(DSL.name("store_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_stock.direction</code>.
     */
    public final TableField<MisStockRecord, Integer> DIRECTION = createField(DSL.name("direction"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mis_stock.occur_at</code>.
     */
    public final TableField<MisStockRecord, LocalDate> OCCUR_AT = createField(DSL.name("occur_at"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.mis_stock.status</code>.
     */
    public final TableField<MisStockRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mis_stock.created_at</code>.
     */
    public final TableField<MisStockRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.mis_stock.created_by</code>.
     */
    public final TableField<MisStockRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_stock.updted_at</code>.
     */
    public final TableField<MisStockRecord, LocalDateTime> UPDTED_AT = createField(DSL.name("updted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.mis_stock.updated_by</code>.
     */
    public final TableField<MisStockRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_stock.corp_id</code>.
     */
    public final TableField<MisStockRecord, Long> CORP_ID = createField(DSL.name("corp_id"), SQLDataType.BIGINT, this, "");

    private MisStock(Name alias, Table<MisStockRecord> aliased) {
        this(alias, aliased, null);
    }

    private MisStock(Name alias, Table<MisStockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mis_stock</code> table reference
     */
    public MisStock(String alias) {
        this(DSL.name(alias), MIS_STOCK);
    }

    /**
     * Create an aliased <code>public.mis_stock</code> table reference
     */
    public MisStock(Name alias) {
        this(alias, MIS_STOCK);
    }

    /**
     * Create a <code>public.mis_stock</code> table reference
     */
    public MisStock() {
        this(DSL.name("mis_stock"), null);
    }

    public <O extends Record> MisStock(Table<O> child, ForeignKey<O, MisStockRecord> key) {
        super(child, key, MIS_STOCK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MisStockRecord, Long> getIdentity() {
        return (Identity<MisStockRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MisStockRecord> getPrimaryKey() {
        return Keys.STOCK_PKEY;
    }

    @Override
    public MisStock as(String alias) {
        return new MisStock(DSL.name(alias), this);
    }

    @Override
    public MisStock as(Name alias) {
        return new MisStock(alias, this);
    }

    @Override
    public MisStock as(Table<?> alias) {
        return new MisStock(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MisStock rename(String name) {
        return new MisStock(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisStock rename(Name name) {
        return new MisStock(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisStock rename(Table<?> name) {
        return new MisStock(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, String, String, BigDecimal, BigDecimal, BigDecimal, Long, String, Long, Integer, LocalDate, Integer, LocalDateTime, String, LocalDateTime, String, Long> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super Long, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super Long, ? super String, ? super Long, ? super Integer, ? super LocalDate, ? super Integer, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super Long, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super Long, ? super String, ? super Long, ? super Integer, ? super LocalDate, ? super Integer, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
