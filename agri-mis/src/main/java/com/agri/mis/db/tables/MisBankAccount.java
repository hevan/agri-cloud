/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.MisBankAccountRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MisBankAccount extends TableImpl<MisBankAccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mis_bank_account</code>
     */
    public static final MisBankAccount MIS_BANK_ACCOUNT = new MisBankAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MisBankAccountRecord> getRecordType() {
        return MisBankAccountRecord.class;
    }

    /**
     * The column <code>public.mis_bank_account.id</code>.
     */
    public final TableField<MisBankAccountRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.mis_bank_account.account_name</code>.
     */
    public final TableField<MisBankAccountRecord, String> ACCOUNT_NAME = createField(DSL.name("account_name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_bank_account.bank_branch</code>.
     */
    public final TableField<MisBankAccountRecord, String> BANK_BRANCH = createField(DSL.name("bank_branch"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_bank_account.account_no</code>.
     */
    public final TableField<MisBankAccountRecord, String> ACCOUNT_NO = createField(DSL.name("account_no"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_bank_account.entity_id</code>.
     */
    public final TableField<MisBankAccountRecord, Long> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_bank_account.entity_name</code>.
     */
    public final TableField<MisBankAccountRecord, String> ENTITY_NAME = createField(DSL.name("entity_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.mis_bank_account.bank</code>.
     */
    public final TableField<MisBankAccountRecord, String> BANK = createField(DSL.name("bank"), SQLDataType.VARCHAR(100), this, "");

    private MisBankAccount(Name alias, Table<MisBankAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private MisBankAccount(Name alias, Table<MisBankAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mis_bank_account</code> table reference
     */
    public MisBankAccount(String alias) {
        this(DSL.name(alias), MIS_BANK_ACCOUNT);
    }

    /**
     * Create an aliased <code>public.mis_bank_account</code> table reference
     */
    public MisBankAccount(Name alias) {
        this(alias, MIS_BANK_ACCOUNT);
    }

    /**
     * Create a <code>public.mis_bank_account</code> table reference
     */
    public MisBankAccount() {
        this(DSL.name("mis_bank_account"), null);
    }

    public <O extends Record> MisBankAccount(Table<O> child, ForeignKey<O, MisBankAccountRecord> key) {
        super(child, key, MIS_BANK_ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<MisBankAccountRecord> getPrimaryKey() {
        return Keys.BANK_ACCOUNT_PKEY;
    }

    @Override
    public MisBankAccount as(String alias) {
        return new MisBankAccount(DSL.name(alias), this);
    }

    @Override
    public MisBankAccount as(Name alias) {
        return new MisBankAccount(alias, this);
    }

    @Override
    public MisBankAccount as(Table<?> alias) {
        return new MisBankAccount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MisBankAccount rename(String name) {
        return new MisBankAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisBankAccount rename(Name name) {
        return new MisBankAccount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisBankAccount rename(Table<?> name) {
        return new MisBankAccount(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, Long, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
