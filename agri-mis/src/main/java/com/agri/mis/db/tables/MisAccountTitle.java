/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.MisAccountTitleRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MisAccountTitle extends TableImpl<MisAccountTitleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mis_account_title</code>
     */
    public static final MisAccountTitle MIS_ACCOUNT_TITLE = new MisAccountTitle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MisAccountTitleRecord> getRecordType() {
        return MisAccountTitleRecord.class;
    }

    /**
     * The column <code>public.mis_account_title.id</code>.
     */
    public final TableField<MisAccountTitleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.mis_account_title.name</code>.
     */
    public final TableField<MisAccountTitleRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_account_title.code</code>.
     */
    public final TableField<MisAccountTitleRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.mis_account_title.description</code>.
     */
    public final TableField<MisAccountTitleRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>public.mis_account_title.category</code>.
     */
    public final TableField<MisAccountTitleRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.mis_account_title.parent_id</code>.
     */
    public final TableField<MisAccountTitleRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_account_title.corp_id</code>.
     */
    public final TableField<MisAccountTitleRecord, Long> CORP_ID = createField(DSL.name("corp_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_account_title.direction</code>.
     */
    public final TableField<MisAccountTitleRecord, Integer> DIRECTION = createField(DSL.name("direction"), SQLDataType.INTEGER.nullable(false), this, "");

    private MisAccountTitle(Name alias, Table<MisAccountTitleRecord> aliased) {
        this(alias, aliased, null);
    }

    private MisAccountTitle(Name alias, Table<MisAccountTitleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mis_account_title</code> table reference
     */
    public MisAccountTitle(String alias) {
        this(DSL.name(alias), MIS_ACCOUNT_TITLE);
    }

    /**
     * Create an aliased <code>public.mis_account_title</code> table reference
     */
    public MisAccountTitle(Name alias) {
        this(alias, MIS_ACCOUNT_TITLE);
    }

    /**
     * Create a <code>public.mis_account_title</code> table reference
     */
    public MisAccountTitle() {
        this(DSL.name("mis_account_title"), null);
    }

    public <O extends Record> MisAccountTitle(Table<O> child, ForeignKey<O, MisAccountTitleRecord> key) {
        super(child, key, MIS_ACCOUNT_TITLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MisAccountTitleRecord, Long> getIdentity() {
        return (Identity<MisAccountTitleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MisAccountTitleRecord> getPrimaryKey() {
        return Keys.ACCOUNT_TITLE_PKEY;
    }

    @Override
    public MisAccountTitle as(String alias) {
        return new MisAccountTitle(DSL.name(alias), this);
    }

    @Override
    public MisAccountTitle as(Name alias) {
        return new MisAccountTitle(alias, this);
    }

    @Override
    public MisAccountTitle as(Table<?> alias) {
        return new MisAccountTitle(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MisAccountTitle rename(String name) {
        return new MisAccountTitle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisAccountTitle rename(Name name) {
        return new MisAccountTitle(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisAccountTitle rename(Table<?> name) {
        return new MisAccountTitle(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, String, String, Long, Long, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
