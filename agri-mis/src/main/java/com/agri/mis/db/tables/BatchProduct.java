/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.BatchProductRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function20;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchProduct extends TableImpl<BatchProductRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.batch_product</code>
     */
    public static final BatchProduct BATCH_PRODUCT = new BatchProduct();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchProductRecord> getRecordType() {
        return BatchProductRecord.class;
    }

    /**
     * The column <code>public.batch_product.id</code>.
     */
    public final TableField<BatchProductRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.batch_product.name</code>.
     */
    public final TableField<BatchProductRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.batch_product.code</code>.
     */
    public final TableField<BatchProductRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.batch_product.product_id</code>.
     */
    public final TableField<BatchProductRecord, Long> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.batch_product.start_at</code>.
     */
    public final TableField<BatchProductRecord, LocalDate> START_AT = createField(DSL.name("start_at"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.batch_product.end_at</code>.
     */
    public final TableField<BatchProductRecord, LocalDate> END_AT = createField(DSL.name("end_at"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.batch_product.days</code>.
     */
    public final TableField<BatchProductRecord, Integer> DAYS = createField(DSL.name("days"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.batch_product.production_estimated</code>.
     */
    public final TableField<BatchProductRecord, Double> PRODUCTION_ESTIMATED = createField(DSL.name("production_estimated"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.batch_product.production_real</code>.
     */
    public final TableField<BatchProductRecord, Double> PRODUCTION_REAL = createField(DSL.name("production_real"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.batch_product.invest_estimated</code>.
     */
    public final TableField<BatchProductRecord, BigDecimal> INVEST_ESTIMATED = createField(DSL.name("invest_estimated"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.batch_product.invest_real</code>.
     */
    public final TableField<BatchProductRecord, BigDecimal> INVEST_REAL = createField(DSL.name("invest_real"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.batch_product.corp_id</code>.
     */
    public final TableField<BatchProductRecord, Long> CORP_ID = createField(DSL.name("corp_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.batch_product.calc_unit</code>.
     */
    public final TableField<BatchProductRecord, String> CALC_UNIT = createField(DSL.name("calc_unit"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.batch_product.park_id</code>.
     */
    public final TableField<BatchProductRecord, Long> PARK_ID = createField(DSL.name("park_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.batch_product.created_user_id</code>.
     */
    public final TableField<BatchProductRecord, Long> CREATED_USER_ID = createField(DSL.name("created_user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.batch_product.created_by</code>.
     */
    public final TableField<BatchProductRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.batch_product.created_at</code>.
     */
    public final TableField<BatchProductRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.batch_product.description</code>.
     */
    public final TableField<BatchProductRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>public.batch_product.quantity</code>.
     */
    public final TableField<BatchProductRecord, Double> QUANTITY = createField(DSL.name("quantity"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.batch_product.status</code>.
     */
    public final TableField<BatchProductRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER, this, "");

    private BatchProduct(Name alias, Table<BatchProductRecord> aliased) {
        this(alias, aliased, null);
    }

    private BatchProduct(Name alias, Table<BatchProductRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.batch_product</code> table reference
     */
    public BatchProduct(String alias) {
        this(DSL.name(alias), BATCH_PRODUCT);
    }

    /**
     * Create an aliased <code>public.batch_product</code> table reference
     */
    public BatchProduct(Name alias) {
        this(alias, BATCH_PRODUCT);
    }

    /**
     * Create a <code>public.batch_product</code> table reference
     */
    public BatchProduct() {
        this(DSL.name("batch_product"), null);
    }

    public <O extends Record> BatchProduct(Table<O> child, ForeignKey<O, BatchProductRecord> key) {
        super(child, key, BATCH_PRODUCT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BatchProductRecord, Long> getIdentity() {
        return (Identity<BatchProductRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BatchProductRecord> getPrimaryKey() {
        return Keys.PRODUCT_BATCH_PKEY;
    }

    @Override
    public BatchProduct as(String alias) {
        return new BatchProduct(DSL.name(alias), this);
    }

    @Override
    public BatchProduct as(Name alias) {
        return new BatchProduct(alias, this);
    }

    @Override
    public BatchProduct as(Table<?> alias) {
        return new BatchProduct(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchProduct rename(String name) {
        return new BatchProduct(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchProduct rename(Name name) {
        return new BatchProduct(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchProduct rename(Table<?> name) {
        return new BatchProduct(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Long, String, String, Long, LocalDate, LocalDate, Integer, Double, Double, BigDecimal, BigDecimal, Long, String, Long, Long, String, LocalDateTime, String, Double, Integer> fieldsRow() {
        return (Row20) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function20<? super Long, ? super String, ? super String, ? super Long, ? super LocalDate, ? super LocalDate, ? super Integer, ? super Double, ? super Double, ? super BigDecimal, ? super BigDecimal, ? super Long, ? super String, ? super Long, ? super Long, ? super String, ? super LocalDateTime, ? super String, ? super Double, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function20<? super Long, ? super String, ? super String, ? super Long, ? super LocalDate, ? super LocalDate, ? super Integer, ? super Double, ? super Double, ? super BigDecimal, ? super BigDecimal, ? super Long, ? super String, ? super Long, ? super Long, ? super String, ? super LocalDateTime, ? super String, ? super Double, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
