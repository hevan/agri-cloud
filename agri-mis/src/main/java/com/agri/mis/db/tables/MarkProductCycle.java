/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.MarkProductCycleRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MarkProductCycle extends TableImpl<MarkProductCycleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mark_product_cycle</code>
     */
    public static final MarkProductCycle MARK_PRODUCT_CYCLE = new MarkProductCycle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MarkProductCycleRecord> getRecordType() {
        return MarkProductCycleRecord.class;
    }

    /**
     * The column <code>public.mark_product_cycle.id</code>.
     */
    public final TableField<MarkProductCycleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.mark_product_cycle.name</code>.
     */
    public final TableField<MarkProductCycleRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.mark_product_cycle.description</code>.
     */
    public final TableField<MarkProductCycleRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.mark_product_cycle.image_url</code>.
     */
    public final TableField<MarkProductCycleRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.mark_product_cycle.product_batch_id</code>.
     */
    public final TableField<MarkProductCycleRecord, Long> PRODUCT_BATCH_ID = createField(DSL.name("product_batch_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.mark_product_cycle.days</code>.
     */
    public final TableField<MarkProductCycleRecord, Integer> DAYS = createField(DSL.name("days"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mark_product_cycle.amount</code>.
     */
    public final TableField<MarkProductCycleRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.mark_product_cycle.parent_id</code>.
     */
    public final TableField<MarkProductCycleRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mark_product_cycle.start_at</code>.
     */
    public final TableField<MarkProductCycleRecord, LocalDate> START_AT = createField(DSL.name("start_at"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.mark_product_cycle.end_at</code>.
     */
    public final TableField<MarkProductCycleRecord, LocalDate> END_AT = createField(DSL.name("end_at"), SQLDataType.LOCALDATE, this, "");

    private MarkProductCycle(Name alias, Table<MarkProductCycleRecord> aliased) {
        this(alias, aliased, null);
    }

    private MarkProductCycle(Name alias, Table<MarkProductCycleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mark_product_cycle</code> table reference
     */
    public MarkProductCycle(String alias) {
        this(DSL.name(alias), MARK_PRODUCT_CYCLE);
    }

    /**
     * Create an aliased <code>public.mark_product_cycle</code> table reference
     */
    public MarkProductCycle(Name alias) {
        this(alias, MARK_PRODUCT_CYCLE);
    }

    /**
     * Create a <code>public.mark_product_cycle</code> table reference
     */
    public MarkProductCycle() {
        this(DSL.name("mark_product_cycle"), null);
    }

    public <O extends Record> MarkProductCycle(Table<O> child, ForeignKey<O, MarkProductCycleRecord> key) {
        super(child, key, MARK_PRODUCT_CYCLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MarkProductCycleRecord, Long> getIdentity() {
        return (Identity<MarkProductCycleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MarkProductCycleRecord> getPrimaryKey() {
        return Keys.PRODUCT_CYCLE_PKEY;
    }

    @Override
    public MarkProductCycle as(String alias) {
        return new MarkProductCycle(DSL.name(alias), this);
    }

    @Override
    public MarkProductCycle as(Name alias) {
        return new MarkProductCycle(alias, this);
    }

    @Override
    public MarkProductCycle as(Table<?> alias) {
        return new MarkProductCycle(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkProductCycle rename(String name) {
        return new MarkProductCycle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkProductCycle rename(Name name) {
        return new MarkProductCycle(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkProductCycle rename(Table<?> name) {
        return new MarkProductCycle(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, String, Long, Integer, BigDecimal, Long, LocalDate, LocalDate> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super Integer, ? super BigDecimal, ? super Long, ? super LocalDate, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super Integer, ? super BigDecimal, ? super Long, ? super LocalDate, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
