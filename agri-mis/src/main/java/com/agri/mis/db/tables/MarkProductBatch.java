/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.MarkProductBatchRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function17;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MarkProductBatch extends TableImpl<MarkProductBatchRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mark_product_batch</code>
     */
    public static final MarkProductBatch MARK_PRODUCT_BATCH = new MarkProductBatch();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MarkProductBatchRecord> getRecordType() {
        return MarkProductBatchRecord.class;
    }

    /**
     * The column <code>public.mark_product_batch.id</code>.
     */
    public final TableField<MarkProductBatchRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.mark_product_batch.name</code>.
     */
    public final TableField<MarkProductBatchRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mark_product_batch.code</code>.
     */
    public final TableField<MarkProductBatchRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.mark_product_batch.product_id</code>.
     */
    public final TableField<MarkProductBatchRecord, Long> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mark_product_batch.start_at</code>.
     */
    public final TableField<MarkProductBatchRecord, LocalDate> START_AT = createField(DSL.name("start_at"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.mark_product_batch.end_at</code>.
     */
    public final TableField<MarkProductBatchRecord, LocalDate> END_AT = createField(DSL.name("end_at"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.mark_product_batch.days</code>.
     */
    public final TableField<MarkProductBatchRecord, Integer> DAYS = createField(DSL.name("days"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mark_product_batch.created_type</code>.
     */
    public final TableField<MarkProductBatchRecord, Integer> CREATED_TYPE = createField(DSL.name("created_type"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.mark_product_batch.production</code>.
     */
    public final TableField<MarkProductBatchRecord, Double> PRODUCTION = createField(DSL.name("production"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.mark_product_batch.invest</code>.
     */
    public final TableField<MarkProductBatchRecord, BigDecimal> INVEST = createField(DSL.name("invest"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.mark_product_batch.sale_price</code>.
     */
    public final TableField<MarkProductBatchRecord, BigDecimal> SALE_PRICE = createField(DSL.name("sale_price"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.mark_product_batch.unit</code>.
     */
    public final TableField<MarkProductBatchRecord, String> UNIT = createField(DSL.name("unit"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.mark_product_batch.created_at</code>.
     */
    public final TableField<MarkProductBatchRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.mark_product_batch.created_by</code>.
     */
    public final TableField<MarkProductBatchRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.mark_product_batch.created_user_id</code>.
     */
    public final TableField<MarkProductBatchRecord, Long> CREATED_USER_ID = createField(DSL.name("created_user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mark_product_batch.description</code>.
     */
    public final TableField<MarkProductBatchRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>public.mark_product_batch.status</code>.
     */
    public final TableField<MarkProductBatchRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER, this, "");

    private MarkProductBatch(Name alias, Table<MarkProductBatchRecord> aliased) {
        this(alias, aliased, null);
    }

    private MarkProductBatch(Name alias, Table<MarkProductBatchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mark_product_batch</code> table reference
     */
    public MarkProductBatch(String alias) {
        this(DSL.name(alias), MARK_PRODUCT_BATCH);
    }

    /**
     * Create an aliased <code>public.mark_product_batch</code> table reference
     */
    public MarkProductBatch(Name alias) {
        this(alias, MARK_PRODUCT_BATCH);
    }

    /**
     * Create a <code>public.mark_product_batch</code> table reference
     */
    public MarkProductBatch() {
        this(DSL.name("mark_product_batch"), null);
    }

    public <O extends Record> MarkProductBatch(Table<O> child, ForeignKey<O, MarkProductBatchRecord> key) {
        super(child, key, MARK_PRODUCT_BATCH);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MarkProductBatchRecord, Long> getIdentity() {
        return (Identity<MarkProductBatchRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MarkProductBatchRecord> getPrimaryKey() {
        return Keys.MARK_PRODUCT_BATCH_PKEY;
    }

    @Override
    public MarkProductBatch as(String alias) {
        return new MarkProductBatch(DSL.name(alias), this);
    }

    @Override
    public MarkProductBatch as(Name alias) {
        return new MarkProductBatch(alias, this);
    }

    @Override
    public MarkProductBatch as(Table<?> alias) {
        return new MarkProductBatch(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkProductBatch rename(String name) {
        return new MarkProductBatch(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkProductBatch rename(Name name) {
        return new MarkProductBatch(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkProductBatch rename(Table<?> name) {
        return new MarkProductBatch(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, String, String, Long, LocalDate, LocalDate, Integer, Integer, Double, BigDecimal, BigDecimal, String, LocalDateTime, String, Long, String, Integer> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super Long, ? super String, ? super String, ? super Long, ? super LocalDate, ? super LocalDate, ? super Integer, ? super Integer, ? super Double, ? super BigDecimal, ? super BigDecimal, ? super String, ? super LocalDateTime, ? super String, ? super Long, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super Long, ? super String, ? super String, ? super Long, ? super LocalDate, ? super LocalDate, ? super Integer, ? super Integer, ? super Double, ? super BigDecimal, ? super BigDecimal, ? super String, ? super LocalDateTime, ? super String, ? super Long, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
