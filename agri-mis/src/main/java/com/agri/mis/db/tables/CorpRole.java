/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.CorpRoleRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CorpRole extends TableImpl<CorpRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.corp_role</code>
     */
    public static final CorpRole CORP_ROLE = new CorpRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CorpRoleRecord> getRecordType() {
        return CorpRoleRecord.class;
    }

    /**
     * The column <code>public.corp_role.id</code>.
     */
    public final TableField<CorpRoleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.corp_role.name</code>.
     */
    public final TableField<CorpRoleRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.corp_role.corp_id</code>.
     */
    public final TableField<CorpRoleRecord, Long> CORP_ID = createField(DSL.name("corp_id"), SQLDataType.BIGINT, this, "");

    private CorpRole(Name alias, Table<CorpRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private CorpRole(Name alias, Table<CorpRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.corp_role</code> table reference
     */
    public CorpRole(String alias) {
        this(DSL.name(alias), CORP_ROLE);
    }

    /**
     * Create an aliased <code>public.corp_role</code> table reference
     */
    public CorpRole(Name alias) {
        this(alias, CORP_ROLE);
    }

    /**
     * Create a <code>public.corp_role</code> table reference
     */
    public CorpRole() {
        this(DSL.name("corp_role"), null);
    }

    public <O extends Record> CorpRole(Table<O> child, ForeignKey<O, CorpRoleRecord> key) {
        super(child, key, CORP_ROLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CorpRoleRecord, Long> getIdentity() {
        return (Identity<CorpRoleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CorpRoleRecord> getPrimaryKey() {
        return Keys.CORP_ROLE_PKEY;
    }

    @Override
    public CorpRole as(String alias) {
        return new CorpRole(DSL.name(alias), this);
    }

    @Override
    public CorpRole as(Name alias) {
        return new CorpRole(alias, this);
    }

    @Override
    public CorpRole as(Table<?> alias) {
        return new CorpRole(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CorpRole rename(String name) {
        return new CorpRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorpRole rename(Name name) {
        return new CorpRole(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorpRole rename(Table<?> name) {
        return new CorpRole(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
