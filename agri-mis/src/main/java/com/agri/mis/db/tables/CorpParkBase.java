/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.CorpParkBaseRecord;

import java.time.LocalDate;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CorpParkBase extends TableImpl<CorpParkBaseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.corp_park_base</code>
     */
    public static final CorpParkBase CORP_PARK_BASE = new CorpParkBase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CorpParkBaseRecord> getRecordType() {
        return CorpParkBaseRecord.class;
    }

    /**
     * The column <code>public.corp_park_base.id</code>.
     */
    public final TableField<CorpParkBaseRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.corp_park_base.name</code>.
     */
    public final TableField<CorpParkBaseRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.corp_park_base.description</code>.
     */
    public final TableField<CorpParkBaseRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>public.corp_park_base.image_url</code>.
     */
    public final TableField<CorpParkBaseRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.corp_park_base.park_id</code>.
     */
    public final TableField<CorpParkBaseRecord, Long> PARK_ID = createField(DSL.name("park_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.corp_park_base.corp_id</code>.
     */
    public final TableField<CorpParkBaseRecord, Long> CORP_ID = createField(DSL.name("corp_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.corp_park_base.area</code>.
     */
    public final TableField<CorpParkBaseRecord, Double> AREA = createField(DSL.name("area"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.corp_park_base.area_use</code>.
     */
    public final TableField<CorpParkBaseRecord, Double> AREA_USE = createField(DSL.name("area_use"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.corp_park_base.created_at</code>.
     */
    public final TableField<CorpParkBaseRecord, LocalDate> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.corp_park_base.address_id</code>.
     */
    public final TableField<CorpParkBaseRecord, Long> ADDRESS_ID = createField(DSL.name("address_id"), SQLDataType.BIGINT, this, "");

    private CorpParkBase(Name alias, Table<CorpParkBaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private CorpParkBase(Name alias, Table<CorpParkBaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.corp_park_base</code> table reference
     */
    public CorpParkBase(String alias) {
        this(DSL.name(alias), CORP_PARK_BASE);
    }

    /**
     * Create an aliased <code>public.corp_park_base</code> table reference
     */
    public CorpParkBase(Name alias) {
        this(alias, CORP_PARK_BASE);
    }

    /**
     * Create a <code>public.corp_park_base</code> table reference
     */
    public CorpParkBase() {
        this(DSL.name("corp_park_base"), null);
    }

    public <O extends Record> CorpParkBase(Table<O> child, ForeignKey<O, CorpParkBaseRecord> key) {
        super(child, key, CORP_PARK_BASE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CorpParkBaseRecord, Long> getIdentity() {
        return (Identity<CorpParkBaseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CorpParkBaseRecord> getPrimaryKey() {
        return Keys.PARK_BASE_PKEY;
    }

    @Override
    public CorpParkBase as(String alias) {
        return new CorpParkBase(DSL.name(alias), this);
    }

    @Override
    public CorpParkBase as(Name alias) {
        return new CorpParkBase(alias, this);
    }

    @Override
    public CorpParkBase as(Table<?> alias) {
        return new CorpParkBase(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CorpParkBase rename(String name) {
        return new CorpParkBase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorpParkBase rename(Name name) {
        return new CorpParkBase(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorpParkBase rename(Table<?> name) {
        return new CorpParkBase(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, String, Long, Long, Double, Double, LocalDate, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super Double, ? super Double, ? super LocalDate, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super Double, ? super Double, ? super LocalDate, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
