/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables.records;


import com.agri.mis.db.tables.BatchBase;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchBaseRecord extends UpdatableRecordImpl<BatchBaseRecord> implements Record4<Long, Long, Long, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.batch_base.id</code>.
     */
    public BatchBaseRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.batch_base.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.batch_base.batch_id</code>.
     */
    public BatchBaseRecord setBatchId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.batch_base.batch_id</code>.
     */
    public Long getBatchId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.batch_base.park_base_id</code>.
     */
    public BatchBaseRecord setParkBaseId(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.batch_base.park_base_id</code>.
     */
    public Long getParkBaseId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.batch_base.area</code>.
     */
    public BatchBaseRecord setArea(Double value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.batch_base.area</code>.
     */
    public Double getArea() {
        return (Double) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, Double> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, Long, Long, Double> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return BatchBase.BATCH_BASE.ID;
    }

    @Override
    public Field<Long> field2() {
        return BatchBase.BATCH_BASE.BATCH_ID;
    }

    @Override
    public Field<Long> field3() {
        return BatchBase.BATCH_BASE.PARK_BASE_ID;
    }

    @Override
    public Field<Double> field4() {
        return BatchBase.BATCH_BASE.AREA;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getBatchId();
    }

    @Override
    public Long component3() {
        return getParkBaseId();
    }

    @Override
    public Double component4() {
        return getArea();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getBatchId();
    }

    @Override
    public Long value3() {
        return getParkBaseId();
    }

    @Override
    public Double value4() {
        return getArea();
    }

    @Override
    public BatchBaseRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public BatchBaseRecord value2(Long value) {
        setBatchId(value);
        return this;
    }

    @Override
    public BatchBaseRecord value3(Long value) {
        setParkBaseId(value);
        return this;
    }

    @Override
    public BatchBaseRecord value4(Double value) {
        setArea(value);
        return this;
    }

    @Override
    public BatchBaseRecord values(Long value1, Long value2, Long value3, Double value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BatchBaseRecord
     */
    public BatchBaseRecord() {
        super(BatchBase.BATCH_BASE);
    }

    /**
     * Create a detached, initialised BatchBaseRecord
     */
    public BatchBaseRecord(Long id, Long batchId, Long parkBaseId, Double area) {
        super(BatchBase.BATCH_BASE);

        setId(id);
        setBatchId(batchId);
        setParkBaseId(parkBaseId);
        setArea(area);
    }

    /**
     * Create a detached, initialised BatchBaseRecord
     */
    public BatchBaseRecord(com.agri.mis.db.tables.pojos.BatchBase value) {
        super(BatchBase.BATCH_BASE);

        if (value != null) {
            setId(value.getId());
            setBatchId(value.getBatchId());
            setParkBaseId(value.getParkBaseId());
            setArea(value.getArea());
        }
    }
}
