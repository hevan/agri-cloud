/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.BatchTeamRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchTeam extends TableImpl<BatchTeamRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.batch_team</code>
     */
    public static final BatchTeam BATCH_TEAM = new BatchTeam();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchTeamRecord> getRecordType() {
        return BatchTeamRecord.class;
    }

    /**
     * The column <code>public.batch_team.id</code>.
     */
    public final TableField<BatchTeamRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.batch_team.batch_id</code>.
     */
    public final TableField<BatchTeamRecord, Long> BATCH_ID = createField(DSL.name("batch_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.batch_team.user_id</code>.
     */
    public final TableField<BatchTeamRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.batch_team.is_manager</code>.
     */
    public final TableField<BatchTeamRecord, Boolean> IS_MANAGER = createField(DSL.name("is_manager"), SQLDataType.BOOLEAN.defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.batch_team.created_at</code>.
     */
    public final TableField<BatchTeamRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private BatchTeam(Name alias, Table<BatchTeamRecord> aliased) {
        this(alias, aliased, null);
    }

    private BatchTeam(Name alias, Table<BatchTeamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.batch_team</code> table reference
     */
    public BatchTeam(String alias) {
        this(DSL.name(alias), BATCH_TEAM);
    }

    /**
     * Create an aliased <code>public.batch_team</code> table reference
     */
    public BatchTeam(Name alias) {
        this(alias, BATCH_TEAM);
    }

    /**
     * Create a <code>public.batch_team</code> table reference
     */
    public BatchTeam() {
        this(DSL.name("batch_team"), null);
    }

    public <O extends Record> BatchTeam(Table<O> child, ForeignKey<O, BatchTeamRecord> key) {
        super(child, key, BATCH_TEAM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BatchTeamRecord, Long> getIdentity() {
        return (Identity<BatchTeamRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BatchTeamRecord> getPrimaryKey() {
        return Keys.BATCH_TEAM_PKEY;
    }

    @Override
    public BatchTeam as(String alias) {
        return new BatchTeam(DSL.name(alias), this);
    }

    @Override
    public BatchTeam as(Name alias) {
        return new BatchTeam(alias, this);
    }

    @Override
    public BatchTeam as(Table<?> alias) {
        return new BatchTeam(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchTeam rename(String name) {
        return new BatchTeam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchTeam rename(Name name) {
        return new BatchTeam(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BatchTeam rename(Table<?> name) {
        return new BatchTeam(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, Boolean, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super Long, ? super Boolean, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Long, ? super Long, ? super Boolean, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
