/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.CorpRoleMenuRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CorpRoleMenu extends TableImpl<CorpRoleMenuRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.corp_role_menu</code>
     */
    public static final CorpRoleMenu CORP_ROLE_MENU = new CorpRoleMenu();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CorpRoleMenuRecord> getRecordType() {
        return CorpRoleMenuRecord.class;
    }

    /**
     * The column <code>public.corp_role_menu.id</code>.
     */
    public final TableField<CorpRoleMenuRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.corp_role_menu.role_id</code>.
     */
    public final TableField<CorpRoleMenuRecord, Long> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.corp_role_menu.menu_id</code>.
     */
    public final TableField<CorpRoleMenuRecord, Long> MENU_ID = createField(DSL.name("menu_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.corp_role_menu.actions</code>.
     */
    public final TableField<CorpRoleMenuRecord, String> ACTIONS = createField(DSL.name("actions"), SQLDataType.VARCHAR(500), this, "");

    private CorpRoleMenu(Name alias, Table<CorpRoleMenuRecord> aliased) {
        this(alias, aliased, null);
    }

    private CorpRoleMenu(Name alias, Table<CorpRoleMenuRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.corp_role_menu</code> table reference
     */
    public CorpRoleMenu(String alias) {
        this(DSL.name(alias), CORP_ROLE_MENU);
    }

    /**
     * Create an aliased <code>public.corp_role_menu</code> table reference
     */
    public CorpRoleMenu(Name alias) {
        this(alias, CORP_ROLE_MENU);
    }

    /**
     * Create a <code>public.corp_role_menu</code> table reference
     */
    public CorpRoleMenu() {
        this(DSL.name("corp_role_menu"), null);
    }

    public <O extends Record> CorpRoleMenu(Table<O> child, ForeignKey<O, CorpRoleMenuRecord> key) {
        super(child, key, CORP_ROLE_MENU);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CorpRoleMenuRecord, Long> getIdentity() {
        return (Identity<CorpRoleMenuRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CorpRoleMenuRecord> getPrimaryKey() {
        return Keys.CORP_ROLE_MENU_PKEY;
    }

    @Override
    public CorpRoleMenu as(String alias) {
        return new CorpRoleMenu(DSL.name(alias), this);
    }

    @Override
    public CorpRoleMenu as(Name alias) {
        return new CorpRoleMenu(alias, this);
    }

    @Override
    public CorpRoleMenu as(Table<?> alias) {
        return new CorpRoleMenu(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CorpRoleMenu rename(String name) {
        return new CorpRoleMenu(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorpRoleMenu rename(Name name) {
        return new CorpRoleMenu(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CorpRoleMenu rename(Table<?> name) {
        return new CorpRoleMenu(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
