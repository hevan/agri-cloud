/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.CmsCategoryRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CmsCategory extends TableImpl<CmsCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cms_category</code>
     */
    public static final CmsCategory CMS_CATEGORY = new CmsCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CmsCategoryRecord> getRecordType() {
        return CmsCategoryRecord.class;
    }

    /**
     * The column <code>public.cms_category.id</code>.
     */
    public final TableField<CmsCategoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.cms_category.code</code>.
     */
    public final TableField<CmsCategoryRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.cms_category.name</code>.
     */
    public final TableField<CmsCategoryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.cms_category.parent_id</code>.
     */
    public final TableField<CmsCategoryRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private CmsCategory(Name alias, Table<CmsCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private CmsCategory(Name alias, Table<CmsCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.cms_category</code> table reference
     */
    public CmsCategory(String alias) {
        this(DSL.name(alias), CMS_CATEGORY);
    }

    /**
     * Create an aliased <code>public.cms_category</code> table reference
     */
    public CmsCategory(Name alias) {
        this(alias, CMS_CATEGORY);
    }

    /**
     * Create a <code>public.cms_category</code> table reference
     */
    public CmsCategory() {
        this(DSL.name("cms_category"), null);
    }

    public <O extends Record> CmsCategory(Table<O> child, ForeignKey<O, CmsCategoryRecord> key) {
        super(child, key, CMS_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CmsCategoryRecord, Long> getIdentity() {
        return (Identity<CmsCategoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CmsCategoryRecord> getPrimaryKey() {
        return Keys.CMS_CATEGORY_PKEY;
    }

    @Override
    public CmsCategory as(String alias) {
        return new CmsCategory(DSL.name(alias), this);
    }

    @Override
    public CmsCategory as(Name alias) {
        return new CmsCategory(alias, this);
    }

    @Override
    public CmsCategory as(Table<?> alias) {
        return new CmsCategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CmsCategory rename(String name) {
        return new CmsCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CmsCategory rename(Name name) {
        return new CmsCategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CmsCategory rename(Table<?> name) {
        return new CmsCategory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
