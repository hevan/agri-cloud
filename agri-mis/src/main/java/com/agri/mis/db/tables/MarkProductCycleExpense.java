/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.MarkProductCycleExpenseRecord;

import java.math.BigDecimal;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MarkProductCycleExpense extends TableImpl<MarkProductCycleExpenseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mark_product_cycle_expense</code>
     */
    public static final MarkProductCycleExpense MARK_PRODUCT_CYCLE_EXPENSE = new MarkProductCycleExpense();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MarkProductCycleExpenseRecord> getRecordType() {
        return MarkProductCycleExpenseRecord.class;
    }

    /**
     * The column <code>public.mark_product_cycle_expense.cycle_id</code>.
     */
    public final TableField<MarkProductCycleExpenseRecord, Long> CYCLE_ID = createField(DSL.name("cycle_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>public.mark_product_cycle_expense.invest_product_name</code>.
     */
    public final TableField<MarkProductCycleExpenseRecord, String> INVEST_PRODUCT_NAME = createField(DSL.name("invest_product_name"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mark_product_cycle_expense.description</code>.
     */
    public final TableField<MarkProductCycleExpenseRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mark_product_cycle_expense.amount</code>.
     */
    public final TableField<MarkProductCycleExpenseRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.mark_product_cycle_expense.price</code>.
     */
    public final TableField<MarkProductCycleExpenseRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(12, 2), this, "");

    /**
     * The column <code>public.mark_product_cycle_expense.quantity</code>.
     */
    public final TableField<MarkProductCycleExpenseRecord, Double> QUANTITY = createField(DSL.name("quantity"), SQLDataType.DOUBLE, this, "");

    /**
     * The column
     * <code>public.mark_product_cycle_expense.product_batch_id</code>.
     */
    public final TableField<MarkProductCycleExpenseRecord, Long> PRODUCT_BATCH_ID = createField(DSL.name("product_batch_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.mark_product_cycle_expense.id</code>.
     */
    public final TableField<MarkProductCycleExpenseRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.mark_product_cycle_expense.calc_unit</code>.
     */
    public final TableField<MarkProductCycleExpenseRecord, String> CALC_UNIT = createField(DSL.name("calc_unit"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.mark_product_cycle_expense.expense_type</code>.
     */
    public final TableField<MarkProductCycleExpenseRecord, String> EXPENSE_TYPE = createField(DSL.name("expense_type"), SQLDataType.VARCHAR(50), this, "");

    private MarkProductCycleExpense(Name alias, Table<MarkProductCycleExpenseRecord> aliased) {
        this(alias, aliased, null);
    }

    private MarkProductCycleExpense(Name alias, Table<MarkProductCycleExpenseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mark_product_cycle_expense</code> table
     * reference
     */
    public MarkProductCycleExpense(String alias) {
        this(DSL.name(alias), MARK_PRODUCT_CYCLE_EXPENSE);
    }

    /**
     * Create an aliased <code>public.mark_product_cycle_expense</code> table
     * reference
     */
    public MarkProductCycleExpense(Name alias) {
        this(alias, MARK_PRODUCT_CYCLE_EXPENSE);
    }

    /**
     * Create a <code>public.mark_product_cycle_expense</code> table reference
     */
    public MarkProductCycleExpense() {
        this(DSL.name("mark_product_cycle_expense"), null);
    }

    public <O extends Record> MarkProductCycleExpense(Table<O> child, ForeignKey<O, MarkProductCycleExpenseRecord> key) {
        super(child, key, MARK_PRODUCT_CYCLE_EXPENSE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MarkProductCycleExpenseRecord, Long> getIdentity() {
        return (Identity<MarkProductCycleExpenseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MarkProductCycleExpenseRecord> getPrimaryKey() {
        return Keys.PRODUCT_CYCLE_EXPENSE_PKEY;
    }

    @Override
    public MarkProductCycleExpense as(String alias) {
        return new MarkProductCycleExpense(DSL.name(alias), this);
    }

    @Override
    public MarkProductCycleExpense as(Name alias) {
        return new MarkProductCycleExpense(alias, this);
    }

    @Override
    public MarkProductCycleExpense as(Table<?> alias) {
        return new MarkProductCycleExpense(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkProductCycleExpense rename(String name) {
        return new MarkProductCycleExpense(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkProductCycleExpense rename(Name name) {
        return new MarkProductCycleExpense(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MarkProductCycleExpense rename(Table<?> name) {
        return new MarkProductCycleExpense(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, BigDecimal, BigDecimal, Double, Long, Long, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super Double, ? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super Double, ? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
