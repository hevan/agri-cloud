/*
 * This file is generated by jOOQ.
 */
package com.agri.mis.db.tables;


import com.agri.mis.db.Keys;
import com.agri.mis.db.Public;
import com.agri.mis.db.tables.records.MisStockPlaceItemRecord;

import java.math.BigDecimal;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MisStockPlaceItem extends TableImpl<MisStockPlaceItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mis_stock_place_item</code>
     */
    public static final MisStockPlaceItem MIS_STOCK_PLACE_ITEM = new MisStockPlaceItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MisStockPlaceItemRecord> getRecordType() {
        return MisStockPlaceItemRecord.class;
    }

    /**
     * The column <code>public.mis_stock_place_item.id</code>.
     */
    public final TableField<MisStockPlaceItemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.mis_stock_place_item.stock_place_id</code>.
     */
    public final TableField<MisStockPlaceItemRecord, Long> STOCK_PLACE_ID = createField(DSL.name("stock_place_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_stock_place_item.product_id</code>.
     */
    public final TableField<MisStockPlaceItemRecord, Long> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mis_stock_place_item.quantity</code>.
     */
    public final TableField<MisStockPlaceItemRecord, BigDecimal> QUANTITY = createField(DSL.name("quantity"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.mis_stock_place_item.box_code</code>.
     */
    public final TableField<MisStockPlaceItemRecord, String> BOX_CODE = createField(DSL.name("box_code"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.mis_stock_place_item.product_code</code>.
     */
    public final TableField<MisStockPlaceItemRecord, String> PRODUCT_CODE = createField(DSL.name("product_code"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private MisStockPlaceItem(Name alias, Table<MisStockPlaceItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private MisStockPlaceItem(Name alias, Table<MisStockPlaceItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mis_stock_place_item</code> table
     * reference
     */
    public MisStockPlaceItem(String alias) {
        this(DSL.name(alias), MIS_STOCK_PLACE_ITEM);
    }

    /**
     * Create an aliased <code>public.mis_stock_place_item</code> table
     * reference
     */
    public MisStockPlaceItem(Name alias) {
        this(alias, MIS_STOCK_PLACE_ITEM);
    }

    /**
     * Create a <code>public.mis_stock_place_item</code> table reference
     */
    public MisStockPlaceItem() {
        this(DSL.name("mis_stock_place_item"), null);
    }

    public <O extends Record> MisStockPlaceItem(Table<O> child, ForeignKey<O, MisStockPlaceItemRecord> key) {
        super(child, key, MIS_STOCK_PLACE_ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MisStockPlaceItemRecord, Long> getIdentity() {
        return (Identity<MisStockPlaceItemRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MisStockPlaceItemRecord> getPrimaryKey() {
        return Keys.MIS_STOCK_PLACE_ITEM_PKEY;
    }

    @Override
    public MisStockPlaceItem as(String alias) {
        return new MisStockPlaceItem(DSL.name(alias), this);
    }

    @Override
    public MisStockPlaceItem as(Name alias) {
        return new MisStockPlaceItem(alias, this);
    }

    @Override
    public MisStockPlaceItem as(Table<?> alias) {
        return new MisStockPlaceItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MisStockPlaceItem rename(String name) {
        return new MisStockPlaceItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisStockPlaceItem rename(Name name) {
        return new MisStockPlaceItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MisStockPlaceItem rename(Table<?> name) {
        return new MisStockPlaceItem(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, BigDecimal, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super Long, ? super BigDecimal, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super Long, ? super BigDecimal, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
